generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  password String


  name      String @unique
  avatarUrl String @default("/uploads/defauld_avatar.png") @map("avatar_url")
  description String? @default("") 

  phone     String    @default("")
  orders    Order[]
  reviews   Review[]
  favorites Product[]

  views ProductViews[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String         @unique
  slug        String         @unique
  description String
  price       Int
  images      String[]
  views       ProductViews[]
  viewsCount Int @default(0) @map("views_count")
  // category Category[]
  // CategoryId Int @map("category_id")
  // reviews Review[]
  orderItems  OrderItem[]
  reviews     Review[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model ProductViews {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  viewedAt  DateTime @default(now())
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String    @unique
  slug     String    @unique()
  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating Int
  text   String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)
  items  OrderItem[]
  total  Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
